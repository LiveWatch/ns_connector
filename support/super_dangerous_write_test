#!/usr/bin/env ruby
# XXX XXX XXX XXX XXX XXX XXX   Warning!  XXX XXX XXX XXX XXX XXX XXX XXX XXX
#
# This *will* write to NetSuite, and delete things. If there is a bug here, we
# will probably leave things behind, accidentaly delete important production
# data and generally break shit.
#
# So, in summary, don't run this anywhere you mind losing data.
#
# XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX

$: << File.join(
		File.dirname(__FILE__),
			'..', 'lib'
)

require 'ns_connector'
require 'rspec/autorun'

unless ARGV.size == 1 then
	warn "Usage: #{$0} <config as ruby code>"
	warn "Warning! This script will probably destroy production data, "\
		"it is only intended for testing"
end

# We shift the argument off here, or it gets passed to the RSpec runner
NSConnector::Config.set_config!(eval(ARGV.shift))

def customer_id
	NSConnector::Config[:valid_customer_id]
end

def delete_id id
	NSConnector::Restlet.execute!(
		:action => 'delete',
		:type_id => 'contact',
		:fields => ['id'],
		:data => {
			:id => id
		}
	)
end

describe 'create' do
	it 'returns the saved record' do
		resource = NSConnector::Restlet.execute!(
			:action => 'create',
			:type_id => 'contact',
			:fields => ['id', 'firstname'],
			:data => {
				:firstname => '__test__'
			}
		)

		# Cleanup
		at_exit do
			warn "Cleaning up contact id: #{resource['id']}"
			delete_id(resource['id'])
		end

		expect(resource).to be_a(Hash)
		expect(resource['id']).to be_a(String)
		expect(resource['id']).to_not be_empty
		expect(resource['firstname']).to eql('__test__') 
	end
end

describe 'update' do
	it 'returns the updated record' do
		resource = NSConnector::Restlet.execute!(
			:action => 'update',
			:type_id => 'contact',
			:fields => ['id', 'firstname'],
			:data => {
				:id => customer_id,
				:firstname => 'Testguy'
			}
		)

		expect(resource).to be_a(Hash)
		expect(resource['id']).to be_a(String)
		expect(resource['id']).to_not be_empty
		expect(resource['firstname']).to eql('Testguy')
	end
end
